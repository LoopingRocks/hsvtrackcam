{"version":3,"sources":["navbar.js","home.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","color","light","expand","NavbarBrand","href","React","Component","Home","props","changeColor","bind","changeLowColor","changeHighColor","state","this","type","hsv","value","h","Math","floor","s","v","fetch","method","headers","Accept","body","JSON","stringify","Card","CardBody","CardTitle","CardText","Container","Row","Col","src","width","height","alt","onChangeComplete","App","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAGqBA,E,iLAEjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,OAAK,EAACC,OAAO,MAChC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,mB,GAL0BC,IAAMC,W,+ECSrBC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBAEvB,EAAKG,MAAQ,GAPI,E,4EAUJb,GACbc,KAAKL,YAAYT,EAAO,S,sCAGVA,GACdc,KAAKL,YAAYT,EAAO,U,kCAGdA,EAAOe,GAAO,IAChBC,EAAQhB,EAARgB,IAEFC,EAAQ,CACZC,EAAGC,KAAKC,MAAe,IAARJ,EAAIE,EAAW,KAC9BG,EAAGF,KAAKC,MAAc,IAARJ,EAAIK,GAClBC,EAAGH,KAAKC,MAAc,IAARJ,EAAIM,IAGpBC,MAAM,WAAD,OAAYR,GAAQ,CACvBS,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,O,+BAKvB,OACE,6BACE,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,wCACA,kBAACC,EAAA,EAAD,qFAIA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,IAAI,eAAeC,MAAM,MAAMC,OAAO,MAAMC,IAAI,aAGzD,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,kBAAD,CAAiBK,iBAAkB3B,KAAKH,kBAE1C,kBAACyB,EAAA,EAAD,KACE,kBAAC,kBAAD,CAAiBK,iBAAkB3B,KAAKF,4B,GA3DxBP,IAAMC,WCJxC,SAASoC,IACP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAKN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GAEVD,QCRKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNN,IAASC,OAAO,kBAAC,EAAD,MAASH,SAASC,eAAe,SD2H3C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fe95a5b0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, NavbarBrand } from \"reactstrap\";\n\nexport default class NavBar extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar color=\"dark\" light expand=\"md\">\n          <NavbarBrand href=\"/\">PenherApp</NavbarBrand>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardText,\n  CardBody,\n  CardTitle\n} from \"reactstrap\";\nimport { PhotoshopPicker } from \"react-color\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeColor = this.changeColor.bind(this);\n    this.changeLowColor = this.changeLowColor.bind(this);\n    this.changeHighColor = this.changeHighColor.bind(this);\n\n    this.state = {};\n  }\n\n  changeLowColor(color) {\n    this.changeColor(color, \"low\");\n  }\n\n  changeHighColor(color) {\n    this.changeColor(color, \"high\");\n  }\n\n  changeColor(color, type) {\n    const { hsv } = color;\n\n    const value = {\n      h: Math.floor((hsv.h * 255) / 360),\n      s: Math.floor(hsv.s * 255),\n      v: Math.floor(hsv.v * 255)\n    };\n\n    fetch(`/colors/${type}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(value)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Card>\n          <CardBody>\n            <CardTitle>Select low and high color range</CardTitle>\n            <CardText>\n              On the left is the lower range color and on the right, the upper\n              range color\n            </CardText>\n            <Container>\n              <Row>\n                <Col>\n                  <img src=\"/stream.mjpg\" width=\"640\" height=\"480\" alt=\"stream\" />\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <PhotoshopPicker onChangeComplete={this.changeLowColor} />\n                </Col>\n                <Col>\n                  <PhotoshopPicker onChangeComplete={this.changeHighColor} />\n                </Col>\n              </Row>\n            </Container>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\n\nimport './App.css';\n\nimport NavBar from \"./navbar\";\nimport Home from \"./home\";\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <Home />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}